name: Comment on the PR

# read-write repo token
# access to secrets
on:
  workflow_run:
    workflows: ["Build PR"]
    types:
      - completed

jobs:
  upload_lints:
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - run: echo ${{ github.event.workflow_run.event }}
      - run: echo ${{ github.event.workflow_run.conclusion }}
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "other_stuff";
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{ github.workspace }}/other_stuff.zip', Buffer.from(download.data));

      - run: unzip other_stuff.zip
      - run: |
          echo "LANG_NAME=$(cat projectname.txt)" >> $GITHUB_ENV
          echo "PIARAST_NAME=$(cat piarast.txt)" >> $GITHUB_ENV
          echo "CI_PULL_REQUEST=$(cat PR_number.txt)" >> $GITHUB_ENV
          echo "CI_COMMIT=$(cat CI_COMMIT.txt)" >> $GITHUB_ENV
          echo "CI_REPO_OWNER=Kakadu" >> $GITHUB_ENV
        #echo "CI_REPO_NAME=test-ocaml-ci-docker" >> $GITHUB_ENV

      - run: |
          echo "${{ env.LANG_NAME }}"
          echo "${{ env.PIARAST_NAME }}"
          echo "CI_PULL_REQUEST = ${{ env.CI_PULL_REQUEST }}"
          echo "CI_COMMIT = ${{ env.CI_COMMIT }}"
          echo "CI_REPO_OWNER = ${{ env.CI_REPO_OWNER }}"

      # - uses: reviewdog/action-setup@v1
      # - name: Run reviewdog
      #   env:
      #     REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.REVIEWDOG_TOKEN1 }}
      #     CI_REPO_OWNER: Kakadu
      #     CI_REPO_NAME: test-ocaml-ci-docker
      #   run: >
      #     cat lints.rdjsonl |
      #     reviewdog -f=rdjsonl -filter-mode nofilter -reporter=github-pr-check -guess

      # TODO: Maybe not deploy empty lint files
      - run: |
          echo "LINTS_NAME=$(date +%Y-%m-%d_%H_%M).json" >> $GITHUB_ENV
      - run: |
          mkdir -p lints
          cp lints.rdjsonl lints/${{ env.LINTS_NAME }}
      - name: Deploy found lints
        uses: peaceiris/actions-gh-pages@v3
        with:
          #deploy_key: ${{ secrets.FP2022_UPLOAD_LINTS }}
          #github_token: ${{ secrets.GITHUB_TOKEN }}
          personal_token: ${{ secrets.FP2022_UPLOAD_LINTS }}
          publish_dir: ./lints
          external_repository: Kakadu/fp2021-ci-artifacts
          publish_branch: master
          keep_files: true
          destination_dir: 2022/${{ env.PIARAST_NAME }}/

      - name: Prepare text with found lints
        shell: bash
        run: |
          export TZ='Europe/Moscow'
          echo "Linter report from $(date), for mini language ${{ env.LANG_NAME }}" > text.md
          echo '```' >> text.md
          cat lints.txt >> text.md
          echo '```' >> text.md

      - run: cat text.md

      - name: Escaping markdown
        run: cat text.md | sed -e 's/%/%25/' | perl -pe 's/\n/%0A/g' > text.escaped.md

      - name: Read file contents
        id: read-escaped-markdown
        uses: andstor/file-reader-action@v1
        with:
          path: text.md

      - name: contents of escaped file
        run: cat text.escaped.md
      #- name: contents of a variable
      #  run: echo ${{ steps.read-escaped-markdown.outputs.contents }}

      - name: Find a comment with linter report
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ env.CI_PULL_REQUEST }}
          body-includes: Linter report from
          comment-author: github-actions[bot]

      - name: Delete old comment
        uses: jungwinter/comment@v1
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        with:
          type: delete
          comment_id: ${{ steps.fc.outputs.comment-id }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          edit-mode: replace
          issue-number: ${{ env.CI_PULL_REQUEST }}
          body: ${{ steps.read-escaped-markdown.outputs.contents }}

  ###################################################################################################
  upload_docs:
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            //console.log(${{ github.event.workflow_run.id }});
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "docs";
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{ github.workspace }}/docs.zip', Buffer.from(download.data));

      - run: |
          mkdir docs
          cd docs && unzip ../docs.zip
      - run: |
          echo "LANG_NAME=$(cat docs/_found_lints/projectname.txt)" >> $GITHUB_ENV
          echo "PR_NUMBER=$(cat docs/_found_lints/PR_number.txt)" >> $GITHUB_ENV
      - run: |
          echo "${{ env.LANG_NAME }}"
          echo "${{ env.PR_NUMBER }}"
         # LANG_NAME is required for uploading docs.
         # PR_NUMBER -- for adding a comment

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # used only to publish in local repo
          publish_dir: ./docs/_doc/_html
          publish_branch: gh-pages
          enable_jekyll: false
          keep_files: true
          destination_dir: docs/${{ env.LANG_NAME }}
          commit_message: >
            Deploying documentation for ${{ env.LANG_NAME }}: https://kakadu.github.io/fp2021/docs/${{ env.LANG_NAME }}
          user_name: 'fp2021[bot]'
          user_email: 'fp2021[bot]@users.noreply.github.com'

      - shell: bash
        run: >
          cat > text.md <<-EOF
              Документация построена $(TZ='Europe/Moscow' date), должна скоро появиться в https://kakadu.github.io/fp2022/docs/${{ env.LANG_NAME }}
          EOF

      - id: get-comment-body
        run: |
          body=$(cat text.md)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo ::set-output name=body::$body

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        if: ${{ always() }}
        with:
          issue-number: ${{ env.PR_NUMBER }}
          body-includes: Документация построена
          comment-author: github-actions[bot]

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          issue-number: ${{ env.PR_NUMBER }}
          body: ${{ steps.get-comment-body.outputs.body }}

  ###################################################################################################
  process_clones:
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            //console.log(${{ github.event.workflow_run.id }});
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{ github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "jscpd_report";
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{ github.workspace }}/jscpd_report.zip', Buffer.from(download.data));

      - run: unzip jscpd_report.zip
      - run: |
          echo "PR_NUMBER=$(cat PR_number.txt)" >> $GITHUB_ENV

      - name: Prepare text with clones report
        shell: bash
        run: |
          printf "%s" "$(< jscpd_report.txt)" > text.md
          # https://stackoverflow.com/a/12524345

      - name: Read file contents
        id: read-escaped-markdown
        uses: andstor/file-reader-action@v1
        with:
          path: text.md

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        if: ${{ always() }}
        with:
          issue-number: ${{ env.PR_NUMBER }}
          body-includes: A report of looking for clones
          comment-author: github-actions[bot]

      - name: Delete old comment
        uses: jungwinter/comment@v1
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        with:
          type: delete
          comment_id: ${{ steps.fc.outputs.comment-id }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Render template
        id: template
        uses: chuhlomin/render-template@v1.4
        with:
          template: .github/jscpd.template.md
          vars: |
            contents: ${{ steps.read-escaped-markdown.outputs.contents }}

      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        if: ${{ steps.read-escaped-markdown.outputs.contents != '' }}
        with:
          edit-mode: replace
          issue-number: ${{ env.PR_NUMBER }}
          body: ${{ steps.read-escaped-markdown.outputs.contents }}

      - if: ${{ steps.read-escaped-markdown.outputs.contents == '' }}
        run: echo "JSPD report is empty"
